/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PebbleDelegateeInterface extends utils.Interface {
  functions: {
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "addFunds()": FunctionFragment;
    "addressToFundsMapping(address)": FunctionFragment;
    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegateFeesBasis()": FunctionFragment;
    "pebbleProxy()": FunctionFragment;
    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)": FunctionFragment;
    "setDelegateFeesBasis(uint16)": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"
      | "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"
      | "addFunds"
      | "addressToFundsMapping"
      | "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"
      | "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"
      | "delegateFeesBasis"
      | "pebbleProxy"
      | "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"
      | "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"
      | "setDelegateFeesBasis"
      | "withdrawFunds(uint256)"
      | "withdrawFunds()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToFundsMapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateFeesBasis",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pebbleProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegateFeesBasis",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToFundsMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateFeesBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pebbleProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegateFeesBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PebbleDelegatee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PebbleDelegateeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressToFundsMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateFeesBasis(overrides?: CallOverrides): Promise<[BigNumber]>;

    pebbleProxy(overrides?: CallOverrides): Promise<[string]>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegateFeesBasis(
      _delegateFeesBasisNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawFunds(uint256)"(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipant: PromiseOrValue<string>,
    _penultimateKeysFor: PromiseOrValue<string>[],
    _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
    _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
    _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
    _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipant: PromiseOrValue<string>,
    _penultimateKeysFor: PromiseOrValue<string>[],
    _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
    _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
    _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
    _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
    _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFunds(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressToFundsMapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
    _groupCreator: PromiseOrValue<string>,
    _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
    _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
    _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
    _groupCreator: PromiseOrValue<string>,
    _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
    _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
    _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
    _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateFeesBasis(overrides?: CallOverrides): Promise<BigNumber>;

  pebbleProxy(overrides?: CallOverrides): Promise<string>;

  "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _encryptedMessage: PromiseOrValue<BytesLike>,
    _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromSender_v: PromiseOrValue<BigNumberish>,
    _signatureFromSender_r: PromiseOrValue<BytesLike>,
    _signatureFromSender_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _encryptedMessage: PromiseOrValue<BytesLike>,
    _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromSender: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegateFeesBasis(
    _delegateFeesBasisNew: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawFunds(uint256)"(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawFunds()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFunds(overrides?: CallOverrides): Promise<void>;

    addressToFundsMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateFeesBasis(overrides?: CallOverrides): Promise<BigNumber>;

    pebbleProxy(overrides?: CallOverrides): Promise<string>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegateFeesBasis(
      _delegateFeesBasisNew: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFunds(uint256)"(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFunds()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressToFundsMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateFeesBasis(overrides?: CallOverrides): Promise<BigNumber>;

    pebbleProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegateFeesBasis(
      _delegateFeesBasisNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawFunds(uint256)"(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressToFundsMapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateFeesBasis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pebbleProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegateFeesBasis(
      _delegateFeesBasisNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFunds(uint256)"(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
