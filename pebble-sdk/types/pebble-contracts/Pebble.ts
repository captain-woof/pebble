/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PebbleInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PEBBLE_ADMIN_ROLE()": FunctionFragment;
    "PEBBLE_DELEGATEE_ROLE()": FunctionFragment;
    "acceptGroupInvite(uint256,address[],uint256[],uint256[],uint256)": FunctionFragment;
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "createGroup(address[],uint256,uint256,uint256,uint256)": FunctionFragment;
    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "deployAndAssignDelegateeContract(uint256)": FunctionFragment;
    "didParticipantAcceptGroupInvite(uint256,address)": FunctionFragment;
    "getDelegatorNonce(address)": FunctionFragment;
    "getGroupPenultimateSharedKeyLastUpdateTimestamp(uint256)": FunctionFragment;
    "getOtherGroupParticipants(uint256)": FunctionFragment;
    "getParticipantGroupPenultimateSharedKey(uint256,address)": FunctionFragment;
    "getParticipantsGroupPenultimateSharedKey(uint256,address[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "grantPebbleAdminRole(address)": FunctionFragment;
    "grantPebbleDelegateeRole(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(string,address[],address[])": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "reinitialize(string,address[],address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokePebbleAdminRole(address)": FunctionFragment;
    "revokePebbleDelegateeRole(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sendMessageInGroup(uint256,bytes)": FunctionFragment;
    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PEBBLE_ADMIN_ROLE"
      | "PEBBLE_DELEGATEE_ROLE"
      | "acceptGroupInvite"
      | "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"
      | "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"
      | "createGroup"
      | "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"
      | "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"
      | "deployAndAssignDelegateeContract"
      | "didParticipantAcceptGroupInvite"
      | "getDelegatorNonce"
      | "getGroupPenultimateSharedKeyLastUpdateTimestamp"
      | "getOtherGroupParticipants"
      | "getParticipantGroupPenultimateSharedKey"
      | "getParticipantsGroupPenultimateSharedKey"
      | "getRoleAdmin"
      | "getVersion"
      | "grantPebbleAdminRole"
      | "grantPebbleDelegateeRole"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "proxiableUUID"
      | "reinitialize"
      | "renounceRole"
      | "revokePebbleAdminRole"
      | "revokePebbleDelegateeRole"
      | "revokeRole"
      | "sendMessageInGroup"
      | "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"
      | "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PEBBLE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PEBBLE_DELEGATEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGroupInvite",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndAssignDelegateeContract",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "didParticipantAcceptGroupInvite",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupPenultimateSharedKeyLastUpdateTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherGroupParticipants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantGroupPenultimateSharedKey",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantsGroupPenultimateSharedKey",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantPebbleAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPebbleDelegateeRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePebbleAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePebbleDelegateeRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageInGroup",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PEBBLE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PEBBLE_DELEGATEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGroupInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAndAssignDelegateeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didParticipantAcceptGroupInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupPenultimateSharedKeyLastUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherGroupParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantGroupPenultimateSharedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantsGroupPenultimateSharedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantPebbleAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPebbleDelegateeRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePebbleAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePebbleDelegateeRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageInGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AllInvitesAccepted(uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Invite(uint256,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SendMessage(uint256,address,bytes)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllInvitesAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invite"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AllInvitesAcceptedEventObject {
  groupId: BigNumber;
}
export type AllInvitesAcceptedEvent = TypedEvent<
  [BigNumber],
  AllInvitesAcceptedEventObject
>;

export type AllInvitesAcceptedEventFilter =
  TypedEventFilter<AllInvitesAcceptedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InviteEventObject {
  groupId: BigNumber;
  creator: string;
  participant: string;
}
export type InviteEvent = TypedEvent<
  [BigNumber, string, string],
  InviteEventObject
>;

export type InviteEventFilter = TypedEventFilter<InviteEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SendMessageEventObject {
  groupId: BigNumber;
  sender: string;
  encryptedMessage: string;
}
export type SendMessageEvent = TypedEvent<
  [BigNumber, string, string],
  SendMessageEventObject
>;

export type SendMessageEventFilter = TypedEventFilter<SendMessageEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Pebble extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PebbleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PEBBLE_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PEBBLE_DELEGATEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGroup(
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployAndAssignDelegateeContract(
      _delegateFeesBasis: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    didParticipantAcceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDelegatorNonce(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getGroupPenultimateSharedKeyLastUpdateTimestamp(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getOtherGroupParticipants(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { otherParticipants: string[] }>;

    getParticipantGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        penultimateSharedKeyX: BigNumber;
        penultimateSharedKeyY: BigNumber;
      }
    >;

    getParticipantsGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipants: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        penultimateSharedKeysX: BigNumber[];
        penultimateSharedKeysY: BigNumber[];
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    grantPebbleAdminRole(
      _pebbleAdminNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantPebbleDelegateeRole(
      _delegateeNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    reinitialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePebbleAdminRole(
      _pebbleAdminToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePebbleDelegateeRole(
      _delegateeToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageInGroup(
      _groupId: PromiseOrValue<BigNumberish>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PEBBLE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PEBBLE_DELEGATEE_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptGroupInvite(
    _groupId: PromiseOrValue<BigNumberish>,
    _penultimateKeysFor: PromiseOrValue<string>[],
    _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
    _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
    _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipant: PromiseOrValue<string>,
    _penultimateKeysFor: PromiseOrValue<string>[],
    _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
    _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
    _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
    _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipant: PromiseOrValue<string>,
    _penultimateKeysFor: PromiseOrValue<string>[],
    _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
    _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
    _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
    _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
    _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
    _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGroup(
    _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
    _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
    _groupCreator: PromiseOrValue<string>,
    _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
    _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
    _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
    _groupCreator: PromiseOrValue<string>,
    _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
    _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
    _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
    _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
    _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
    _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployAndAssignDelegateeContract(
    _delegateFeesBasis: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  didParticipantAcceptGroupInvite(
    _groupId: PromiseOrValue<BigNumberish>,
    _participant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDelegatorNonce(
    _delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGroupPenultimateSharedKeyLastUpdateTimestamp(
    _groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOtherGroupParticipants(
    _groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getParticipantGroupPenultimateSharedKey(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      penultimateSharedKeyX: BigNumber;
      penultimateSharedKeyY: BigNumber;
    }
  >;

  getParticipantsGroupPenultimateSharedKey(
    _groupId: PromiseOrValue<BigNumberish>,
    _groupParticipants: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      penultimateSharedKeysX: BigNumber[];
      penultimateSharedKeysY: BigNumber[];
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  grantPebbleAdminRole(
    _pebbleAdminNew: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantPebbleDelegateeRole(
    _delegateeNew: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _pebbleVersion: PromiseOrValue<string>,
    _pebbleAdmins: PromiseOrValue<string>[],
    _delegatees: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  reinitialize(
    _pebbleVersion: PromiseOrValue<string>,
    _pebbleAdmins: PromiseOrValue<string>[],
    _delegatees: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePebbleAdminRole(
    _pebbleAdminToRevoke: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePebbleDelegateeRole(
    _delegateeToRevoke: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageInGroup(
    _groupId: PromiseOrValue<BigNumberish>,
    _encryptedMessage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _encryptedMessage: PromiseOrValue<BytesLike>,
    _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromSender_v: PromiseOrValue<BigNumberish>,
    _signatureFromSender_r: PromiseOrValue<BytesLike>,
    _signatureFromSender_s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
    _groupId: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _encryptedMessage: PromiseOrValue<BytesLike>,
    _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
    _signatureFromSender: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PEBBLE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PEBBLE_DELEGATEE_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGroup(
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployAndAssignDelegateeContract(
      _delegateFeesBasis: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    didParticipantAcceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDelegatorNonce(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupPenultimateSharedKeyLastUpdateTimestamp(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtherGroupParticipants(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getParticipantGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        penultimateSharedKeyX: BigNumber;
        penultimateSharedKeyY: BigNumber;
      }
    >;

    getParticipantsGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipants: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        penultimateSharedKeysX: BigNumber[];
        penultimateSharedKeysY: BigNumber[];
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    grantPebbleAdminRole(
      _pebbleAdminNew: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantPebbleDelegateeRole(
      _delegateeNew: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    reinitialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePebbleAdminRole(
      _pebbleAdminToRevoke: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePebbleDelegateeRole(
      _delegateeToRevoke: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageInGroup(
      _groupId: PromiseOrValue<BigNumberish>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AllInvitesAccepted(uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null
    ): AllInvitesAcceptedEventFilter;
    AllInvitesAccepted(
      groupId?: PromiseOrValue<BigNumberish> | null
    ): AllInvitesAcceptedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Invite(uint256,address,address)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      participant?: PromiseOrValue<string> | null
    ): InviteEventFilter;
    Invite(
      groupId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      participant?: PromiseOrValue<string> | null
    ): InviteEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SendMessage(uint256,address,bytes)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      encryptedMessage?: null
    ): SendMessageEventFilter;
    SendMessage(
      groupId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      encryptedMessage?: null
    ): SendMessageEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PEBBLE_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PEBBLE_DELEGATEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGroup(
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployAndAssignDelegateeContract(
      _delegateFeesBasis: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    didParticipantAcceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorNonce(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupPenultimateSharedKeyLastUpdateTimestamp(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtherGroupParticipants(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipantGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipantsGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipants: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    grantPebbleAdminRole(
      _pebbleAdminNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantPebbleDelegateeRole(
      _delegateeNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    reinitialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePebbleAdminRole(
      _pebbleAdminToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePebbleDelegateeRole(
      _delegateeToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageInGroup(
      _groupId: PromiseOrValue<BigNumberish>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PEBBLE_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PEBBLE_DELEGATEE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptGroupInviteForDelegator(uint256,address,address[],uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      _penultimateKeysFor: PromiseOrValue<string>[],
      _penultimateKeysXUpdated: PromiseOrValue<BigNumberish>[],
      _penultimateKeysYUpdated: PromiseOrValue<BigNumberish>[],
      _timestampForWhichUpdatedKeysAreMeant: PromiseOrValue<BigNumberish>,
      _groupParticipantDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_v: PromiseOrValue<BigNumberish>,
      _signatureFromGroupParticipant_r: PromiseOrValue<BytesLike>,
      _signatureFromGroupParticipant_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGroup(
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,bytes)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createGroupForDelegator(address,address[],uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      _groupCreator: PromiseOrValue<string>,
      _groupParticipantsOtherThanCreator: PromiseOrValue<string>[],
      _initialPenultimateSharedKeyForCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyForCreatorY: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorX: PromiseOrValue<BigNumberish>,
      _initialPenultimateSharedKeyFromCreatorY: PromiseOrValue<BigNumberish>,
      _groupCreatorDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_v: PromiseOrValue<BigNumberish>,
      _signatureFromDelegator_r: PromiseOrValue<BytesLike>,
      _signatureFromDelegator_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployAndAssignDelegateeContract(
      _delegateFeesBasis: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    didParticipantAcceptGroupInvite(
      _groupId: PromiseOrValue<BigNumberish>,
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorNonce(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupPenultimateSharedKeyLastUpdateTimestamp(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtherGroupParticipants(
      _groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipantGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipantsGroupPenultimateSharedKey(
      _groupId: PromiseOrValue<BigNumberish>,
      _groupParticipants: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantPebbleAdminRole(
      _pebbleAdminNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantPebbleDelegateeRole(
      _delegateeNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinitialize(
      _pebbleVersion: PromiseOrValue<string>,
      _pebbleAdmins: PromiseOrValue<string>[],
      _delegatees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePebbleAdminRole(
      _pebbleAdminToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePebbleDelegateeRole(
      _delegateeToRevoke: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageInGroup(
      _groupId: PromiseOrValue<BigNumberish>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,uint8,bytes32,bytes32)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender_v: PromiseOrValue<BigNumberish>,
      _signatureFromSender_r: PromiseOrValue<BytesLike>,
      _signatureFromSender_s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessageInGroupForDelegator(uint256,address,bytes,uint256,bytes)"(
      _groupId: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _encryptedMessage: PromiseOrValue<BytesLike>,
      _senderDelegatorNonce: PromiseOrValue<BigNumberish>,
      _signatureFromSender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
